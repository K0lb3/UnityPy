from __future__ import annotations
from abc import ABC, ABCMeta, abstractmethod
from typing import List, Optional, BinaryIO

from ._defines import Endianess

class EndianBinaryReader(ABC, BinaryIO, metaclass=ABCMeta):
    endian: Endianess
    Length: int
    Position: int
    BaseOffset: int

    def __init__(self, item, endian=">", offset=0): ...
    def seek(self, offset: int, whence: int = 0) -> int: ...
    def tell(self) -> int: ...
    def get_bytes(self) -> bytes: ...
    @abstractmethod
    def create_sub_reader(self, offset: int, length: int) -> EndianBinaryReader:
        pass

    @property
    def bytes(self) -> bytes: ...
    def read(self, *args) -> bytes: ...
    def read_byte(self) -> int: ...
    def read_u_byte(self) -> int: ...
    def read_bytes(self, num: int) -> bytes: ...
    def read_short(self) -> int: ...
    def read_int(self) -> int: ...
    def read_long(self) -> int: ...
    def read_u_short(self) -> int: ...
    def read_u_int(self) -> int: ...
    def read_u_long(self) -> int: ...
    def read_float(self) -> float: ...
    def read_double(self) -> float: ...
    def read_boolean(self) -> bool: ...
    def read_string_to_null(self, max_length=32767) -> str: ...
    def read_string(
        self, size: Optional[int] = None, encoding: str = "utf8"
    ) -> str: ...
    def read_aligned_string(self) -> str: ...
    def align_stream(self, alignment=4) -> int: ...
    def read_byte_array(self) -> bytes: ...
    def read_array(self, command, length: int) -> list: ...
    def read_array_struct(self, param: str, length: int = None) -> List[tuple]: ...
    def read_boolean_array(self, length: int = None) -> List[bool]: ...
    def read_u_byte_array(self, length: int = None) -> List[int]: ...
    def read_u_short_array(self, length: int = None) -> List[int]: ...
    def read_short_array(self, length: int = None) -> List[int]: ...
    def read_int_array(self, length: int = None) -> List[int]: ...
    def read_u_int_array(self, length: int = None) -> List[int]: ...
    def read_long_array(self, length: int = None) -> List[int]: ...
    def read_u_long_array(self, length: int = None) -> List[int]: ...
    def read_float_array(self, length: int = None) -> List[float]: ...
    def read_double_array(self, length: int = None) -> List[float]: ...
    def real_offset(self) -> int: ...
    def read_the_rest(self, obj_start: int, obj_size: int) -> bytes: ...
    def unpack_array(self, string: str, count: int) -> list: ...

class EndianBinaryReader_Memoryview(EndianBinaryReader):
    view: memoryview

class EndianBinaryReader_Streamable(EndianBinaryReader):
    stream: BinaryIO
